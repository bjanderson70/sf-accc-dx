#!groovy
import groovy.json.JsonSlurperClassic
node {

    def BUILD_NUMBER=env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
    def SFDC_USERNAME=ciorg

    def HUB_ORG=env.HUB_ORG_DH
    def SFDC_HOST = env.SFDC_HOST_DH
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID
    def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH
   
    def toolbelt = tool 'toolbelt'

    stage('checkout source') {
        // when running in multi-branch job, one must issue this command
        checkout scm
    }

    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
	 stage('Create Scratch Org') {
			if (isUnix()) {
				rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
            } else {
			    rc = bat returnStatus: true, script: "\"${toolbelt}\\sfdx\" force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile \"${jwt_key_file}\" --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
			}
			if (rc != 0) { error 'hub org authorization failed' }


			// need to pull out assigned username
			if (isUnix()) {
			     rmsg = sh returnStdout: true, script: "${toolbelt}/sfdx force:org:create --setalias ciorg --definitionfile config/project-scratch-def.json --json --setdefaultusername"
            } else {
			   rmsg = bat returnStdout: true, script: "\"${toolbelt}\\sfdx\" force:org:create --setalias ciorg --definitionfile config/project-scratch-def.json --json --setdefaultusername"
			} 
printf ' -->'
printf rmsg			
		    //  
            //def jsonSlurper = new JsonSlurperClassic()
            //def robj = jsonSlurper.parseText(rmsg)
            //if (robj.status != 0) { error 'org creation failed: ' + robj.message }
            //SFDC_USERNAME=ciorg
            //robj = null

        }
	 stage('Push To Test Org') {
			if (isUnix()) {
				rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:source:push --targetusername ${SFDC_USERNAME}"
			} else {
			    rc = bat returnStatus: true, script: "\"${toolbelt}\\sfdx\"  force:source:push --targetusername ${SFDC_USERNAME}"
			}
            if (rc != 0) {
                error 'push failed'
            }
            
        }
	 stage('Run Apex Test') {
            sh "mkdir -p ${RUN_ARTIFACT_DIR}"
            timeout(time: 120, unit: 'SECONDS') {
			    if (isUnix()) {
					rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${SFDC_USERNAME}"
                } else {
					rc = bat returnStatus: true, script: "\"${toolbelt}\\sfdx\" force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --resultformat tap --targetusername ${SFDC_USERNAME}"
				}
				if (rc != 0) {
                    error 'apex test run failed'
                }
            }
        }
	 stage('Delete Test Org') {

			timeout(time: 120, unit: 'SECONDS') {
				if (isUnix()) {
					rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:org:delete --targetusername ${SFDC_USERNAME} --noprompt"
				} else {
					rc = bat returnStatus: true, script: "\"${toolbelt}\\sfdx\" force:org:delete --targetusername ${SFDC_USERNAME} --noprompt"
				}
				if (rc != 0) {
					error 'org deletion request failed'
				}
			}
		}
     stage('collect results') {
            junit keepLongStdio: true, testResults: 'tests/**/*-junit.xml'
        }
       
    }
}